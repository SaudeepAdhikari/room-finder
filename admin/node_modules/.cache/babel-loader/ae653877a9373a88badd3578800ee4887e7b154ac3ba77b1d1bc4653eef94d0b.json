{"ast":null,"code":"// Re-export admin modules for use by the client app\nexport { default as AdminDashboard } from './admin/AdminDashboard';\nexport { default as AdminLayout } from './admin/AdminLayout';\nexport { default as AdminDashboardPage } from './admin/AdminDashboardPage';\nexport { default as AdminRoomsPage } from './admin/AdminRoomsPage';\nexport { default as AdminUsersPage } from './admin/AdminUsersPage';\nexport { default as AdminBookingsPage } from './admin/AdminBookingsPage';\nexport { default as AdminReviewsPage } from './admin/AdminReviewsPage';\nexport { default as AdminSettingsPage } from './admin/AdminSettingsPage';\nexport { default as AdminAnalyticsPage } from './admin/AdminAnalyticsPage';\nexport * from './admin/AdminAuthContext';\nexport * from './admin/AdminUserContext';\n\n// --- Standalone CRA bootstrap -------------------------------------------------\n// The CRA standalone app will import this file. When running the standalone app\n// we want to mount the React app into #root. We provide mountStandalone() so the\n// CRA entrypoint can call it. We also attempt a safe auto-mount when running in\n// a browser with the `__ADMIN_STANDALONE__` flag set (set by CRA start).\n\nexport async function mountStandalone(containerId = 'root') {\n  // dynamic import to avoid pulling react-dom into the client bundle when used\n  // as a library for the main client app.\n  const React = await import('react');\n  const ReactDOMClient = await import('react-dom/client');\n  const App = (await import('./App')).default;\n  const container = document.getElementById(containerId);\n  if (!container) {\n    throw new Error(`Container #${containerId} not found`);\n  }\n  const root = ReactDOMClient.createRoot(container);\n  root.render(React.createElement(React.StrictMode, null, React.createElement(App)));\n}\n\n// Auto-mount when the global flag is present (set REACT_APP_STANDALONE=true in CRA)\nif (typeof window !== 'undefined' && window.__ADMIN_STANDALONE__ === true) {\n  // best-effort mount; ignore errors to keep library usage unaffected\n  mountStandalone().catch(() => {});\n}","map":{"version":3,"names":["default","AdminDashboard","AdminLayout","AdminDashboardPage","AdminRoomsPage","AdminUsersPage","AdminBookingsPage","AdminReviewsPage","AdminSettingsPage","AdminAnalyticsPage","mountStandalone","containerId","React","ReactDOMClient","App","container","document","getElementById","Error","root","createRoot","render","createElement","StrictMode","window","__ADMIN_STANDALONE__","catch"],"sources":["E:/Room Finder/room/admin/src/index.js"],"sourcesContent":["// Re-export admin modules for use by the client app\r\nexport { default as AdminDashboard } from './admin/AdminDashboard';\r\nexport { default as AdminLayout } from './admin/AdminLayout';\r\nexport { default as AdminDashboardPage } from './admin/AdminDashboardPage';\r\nexport { default as AdminRoomsPage } from './admin/AdminRoomsPage';\r\nexport { default as AdminUsersPage } from './admin/AdminUsersPage';\r\nexport { default as AdminBookingsPage } from './admin/AdminBookingsPage';\r\nexport { default as AdminReviewsPage } from './admin/AdminReviewsPage';\r\nexport { default as AdminSettingsPage } from './admin/AdminSettingsPage';\r\nexport { default as AdminAnalyticsPage } from './admin/AdminAnalyticsPage';\r\nexport * from './admin/AdminAuthContext';\r\nexport * from './admin/AdminUserContext';\r\n\r\n// --- Standalone CRA bootstrap -------------------------------------------------\r\n// The CRA standalone app will import this file. When running the standalone app\r\n// we want to mount the React app into #root. We provide mountStandalone() so the\r\n// CRA entrypoint can call it. We also attempt a safe auto-mount when running in\r\n// a browser with the `__ADMIN_STANDALONE__` flag set (set by CRA start).\r\n\r\nexport async function mountStandalone(containerId = 'root') {\r\n\t// dynamic import to avoid pulling react-dom into the client bundle when used\r\n\t// as a library for the main client app.\r\n\tconst React = await import('react');\r\n\tconst ReactDOMClient = await import('react-dom/client');\r\n\tconst App = (await import('./App')).default;\r\n\r\n\tconst container = document.getElementById(containerId);\r\n\tif (!container) {\r\n\t\tthrow new Error(`Container #${containerId} not found`);\r\n\t}\r\n\r\n\tconst root = ReactDOMClient.createRoot(container);\r\n\troot.render(\r\n\t\tReact.createElement(React.StrictMode, null, React.createElement(App))\r\n\t);\r\n}\r\n\r\n// Auto-mount when the global flag is present (set REACT_APP_STANDALONE=true in CRA)\r\nif (typeof window !== 'undefined' && window.__ADMIN_STANDALONE__ === true) {\r\n\t// best-effort mount; ignore errors to keep library usage unaffected\r\n\tmountStandalone().catch(() => {});\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,OAAO,IAAIC,cAAc,QAAQ,wBAAwB;AAClE,SAASD,OAAO,IAAIE,WAAW,QAAQ,qBAAqB;AAC5D,SAASF,OAAO,IAAIG,kBAAkB,QAAQ,4BAA4B;AAC1E,SAASH,OAAO,IAAII,cAAc,QAAQ,wBAAwB;AAClE,SAASJ,OAAO,IAAIK,cAAc,QAAQ,wBAAwB;AAClE,SAASL,OAAO,IAAIM,iBAAiB,QAAQ,2BAA2B;AACxE,SAASN,OAAO,IAAIO,gBAAgB,QAAQ,0BAA0B;AACtE,SAASP,OAAO,IAAIQ,iBAAiB,QAAQ,2BAA2B;AACxE,SAASR,OAAO,IAAIS,kBAAkB,QAAQ,4BAA4B;AAC1E,cAAc,0BAA0B;AACxC,cAAc,0BAA0B;;AAExC;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,eAAeA,CAACC,WAAW,GAAG,MAAM,EAAE;EAC3D;EACA;EACA,MAAMC,KAAK,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC;EACnC,MAAMC,cAAc,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC;EACvD,MAAMC,GAAG,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAEd,OAAO;EAE3C,MAAMe,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACN,WAAW,CAAC;EACtD,IAAI,CAACI,SAAS,EAAE;IACf,MAAM,IAAIG,KAAK,CAAC,cAAcP,WAAW,YAAY,CAAC;EACvD;EAEA,MAAMQ,IAAI,GAAGN,cAAc,CAACO,UAAU,CAACL,SAAS,CAAC;EACjDI,IAAI,CAACE,MAAM,CACVT,KAAK,CAACU,aAAa,CAACV,KAAK,CAACW,UAAU,EAAE,IAAI,EAAEX,KAAK,CAACU,aAAa,CAACR,GAAG,CAAC,CACrE,CAAC;AACF;;AAEA;AACA,IAAI,OAAOU,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,oBAAoB,KAAK,IAAI,EAAE;EAC1E;EACAf,eAAe,CAAC,CAAC,CAACgB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}